name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run tests
      timeout-minutes: 20
      run: |
        go test -v -timeout=15m -coverprofile=coverage.out ./internal/...
        go tool cover -html=coverage.out -o coverage.html
    
    - name: Run race condition tests
      timeout-minutes: 5
      run: |
        go test -race -v ./internal/metrics/
        go test -race -v ./internal/config/
    
    - name: Test Prometheus integration
      timeout-minutes: 3
      run: |
        echo "Testing Prometheus metrics integration..."
        go test -v ./internal/metrics/ -run TestPrometheusIntegration
        go test -v ./internal/metrics/ -run TestPrometheusExportFormat
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./internal/performance/
    
    - name: Check code formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    
    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o bin/edge-stream-linux-amd64 ./examples/complete/
        GOOS=windows GOARCH=amd64 go build -o bin/edge-stream-windows-amd64.exe ./examples/complete/
        GOOS=darwin GOARCH=amd64 go build -o bin/edge-stream-darwin-amd64 ./examples/complete/
        GOOS=darwin GOARCH=arm64 go build -o bin/edge-stream-darwin-arm64 ./examples/complete/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: edge-stream-binaries
        path: bin/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go for security scan
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    
    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest || echo "Gosec installation failed, skipping security scan"
        if command -v gosec >/dev/null 2>&1; then
          gosec -fmt sarif -out gosec-results.sarif ./...
        else
          echo "Gosec not available, creating empty SARIF file"
          echo '{}' > gosec-results.sarif
        fi
    
    - name: Upload Gosec scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'gosec-results.sarif'
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/edge-stream:latest
          ${{ secrets.DOCKER_USERNAME }}/edge-stream:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      if: ${{ secrets.DOCKER_USERNAME == '' || secrets.DOCKER_PASSWORD == '' }}
      with:
        context: .
        push: false
        tags: edge-stream:latest
        platforms: linux/amd64

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}