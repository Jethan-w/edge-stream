package ConfigLoader

import (
	"bufio"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"sync"
)

// ConfigFileType 配置文件类型枚举
type ConfigFileType string

const (
	ConfigFileTypeProperties  ConfigFileType = "PROPERTIES"
	ConfigFileTypeYAML        ConfigFileType = "YAML"
	ConfigFileTypeJSON        ConfigFileType = "JSON"
	ConfigFileTypeXML         ConfigFileType = "XML"
	ConfigFileTypeEnvVars     ConfigFileType = "ENV_VARIABLES"
	ConfigFileTypeSystemProps ConfigFileType = "SYSTEM_PROPS"
)

// ConfigFileManager 配置文件管理器
type ConfigFileManager struct {
	defaultConfigFile string
	envConfigPrefix   string
	mutex             sync.RWMutex
}

// NewConfigFileManager 创建新的配置文件管理器
func NewConfigFileManager() *ConfigFileManager {
	return &ConfigFileManager{
		defaultConfigFile: "nifi.properties",
		envConfigPrefix:   "NIFI_",
	}
}

// LoadConfigFile 加载配置文件
func (cfm *ConfigFileManager) LoadConfigFile(configPath string) (map[string]string, error) {
	cfm.mutex.Lock()
	defer cfm.mutex.Unlock()

	// 如果路径为空，使用默认配置文件
	if configPath == "" {
		configPath = cfm.defaultConfigFile
	}

	// 检查文件是否存在
	if _, err := os.Stat(configPath); os.IsNotExist(err) {
		return nil, fmt.Errorf("配置文件不存在: %s", configPath)
	}

	// 根据文件扩展名确定类型
	fileType := cfm.determineFileType(configPath)

	var properties map[string]string
	var err error

	switch fileType {
	case ConfigFileTypeProperties:
		properties, err = cfm.loadPropertiesFile(configPath)
	case ConfigFileTypeYAML:
		properties, err = cfm.loadYAMLFile(configPath)
	case ConfigFileTypeJSON:
		properties, err = cfm.loadJSONFile(configPath)
	case ConfigFileTypeXML:
		properties, err = cfm.loadXMLFile(configPath)
	default:
		return nil, fmt.Errorf("不支持的配置文件类型: %s", fileType)
	}

	if err != nil {
		return nil, fmt.Errorf("加载配置文件失败: %w", err)
	}

	// 合并环境变量配置
	cfm.mergeEnvironmentVariables(properties)

	return properties, nil
}

// SaveConfigFile 保存配置文件
func (cfm *ConfigFileManager) SaveConfigFile(properties map[string]string, configPath string) error {
	cfm.mutex.Lock()
	defer cfm.mutex.Unlock()

	// 如果路径为空，使用默认配置文件
	if configPath == "" {
		configPath = cfm.defaultConfigFile
	}

	// 根据文件扩展名确定类型
	fileType := cfm.determineFileType(configPath)

	var err error

	switch fileType {
	case ConfigFileTypeProperties:
		err = cfm.savePropertiesFile(properties, configPath)
	case ConfigFileTypeYAML:
		err = cfm.saveYAMLFile(properties, configPath)
	case ConfigFileTypeJSON:
		err = cfm.saveJSONFile(properties, configPath)
	case ConfigFileTypeXML:
		err = cfm.saveXMLFile(properties, configPath)
	default:
		return fmt.Errorf("不支持的配置文件类型: %s", fileType)
	}

	if err != nil {
		return fmt.Errorf("保存配置文件失败: %w", err)
	}

	return nil
}

// determineFileType 根据文件扩展名确定文件类型
func (cfm *ConfigFileManager) determineFileType(filePath string) ConfigFileType {
	ext := strings.ToLower(filepath.Ext(filePath))

	switch ext {
	case ".properties":
		return ConfigFileTypeProperties
	case ".yml", ".yaml":
		return ConfigFileTypeYAML
	case ".json":
		return ConfigFileTypeJSON
	case ".xml":
		return ConfigFileTypeXML
	default:
		return ConfigFileTypeProperties // 默认为properties格式
	}
}

// loadPropertiesFile 加载Properties文件
func (cfm *ConfigFileManager) loadPropertiesFile(filePath string) (map[string]string, error) {
	properties := make(map[string]string)

	file, err := os.Open(filePath)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	lineNumber := 0

	for scanner.Scan() {
		lineNumber++
		line := strings.TrimSpace(scanner.Text())

		// 跳过空行和注释
		if line == "" || strings.HasPrefix(line, "#") || strings.HasPrefix(line, "!") {
			continue
		}

		// 解析键值对
		index := strings.Index(line, "=")
		if index == -1 {
			continue // 跳过没有等号的行
		}

		key := strings.TrimSpace(line[:index])
		value := strings.TrimSpace(line[index+1:])

		// 处理多行值
		if strings.HasSuffix(value, "\\") {
			value = strings.TrimSuffix(value, "\\")
			for scanner.Scan() {
				lineNumber++
				nextLine := strings.TrimSpace(scanner.Text())
				if nextLine == "" {
					break
				}
				value += "\n" + nextLine
			}
		}

		properties[key] = value
	}

	if err := scanner.Err(); err != nil {
		return nil, err
	}

	return properties, nil
}

// savePropertiesFile 保存Properties文件
func (cfm *ConfigFileManager) savePropertiesFile(properties map[string]string, filePath string) error {
	file, err := os.Create(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	writer := bufio.NewWriter(file)
	defer writer.Flush()

	// 写入文件头注释
	_, err = writer.WriteString("# NiFi Configuration File\n")
	if err != nil {
		return err
	}

	_, err = writer.WriteString("# Generated by ConfigManager\n\n")
	if err != nil {
		return err
	}

	// 写入配置项
	for key, value := range properties {
		// 处理多行值
		if strings.Contains(value, "\n") {
			lines := strings.Split(value, "\n")
			for i, line := range lines {
				if i == 0 {
					_, err = writer.WriteString(fmt.Sprintf("%s=%s\\\n", key, line))
				} else if i == len(lines)-1 {
					_, err = writer.WriteString(fmt.Sprintf("%s\n", line))
				} else {
					_, err = writer.WriteString(fmt.Sprintf("%s\\\n", line))
				}
				if err != nil {
					return err
				}
			}
		} else {
			_, err = writer.WriteString(fmt.Sprintf("%s=%s\n", key, value))
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// loadYAMLFile 加载YAML文件（简化实现）
func (cfm *ConfigFileManager) loadYAMLFile(filePath string) (map[string]string, error) {
	// 这里简化实现，实际应该使用yaml库
	// 为了演示，我们将其作为properties文件处理
	return cfm.loadPropertiesFile(filePath)
}

// saveYAMLFile 保存YAML文件（简化实现）
func (cfm *ConfigFileManager) saveYAMLFile(properties map[string]string, filePath string) error {
	// 这里简化实现，实际应该使用yaml库
	file, err := os.Create(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	writer := bufio.NewWriter(file)
	defer writer.Flush()

	// 写入YAML格式
	_, err = writer.WriteString("# NiFi Configuration File (YAML)\n")
	if err != nil {
		return err
	}

	for key, value := range properties {
		_, err = writer.WriteString(fmt.Sprintf("%s: %s\n", key, value))
		if err != nil {
			return err
		}
	}

	return nil
}

// loadJSONFile 加载JSON文件（简化实现）
func (cfm *ConfigFileManager) loadJSONFile(filePath string) (map[string]string, error) {
	// 这里简化实现，实际应该使用json库
	return cfm.loadPropertiesFile(filePath)
}

// saveJSONFile 保存JSON文件（简化实现）
func (cfm *ConfigFileManager) saveJSONFile(properties map[string]string, filePath string) error {
	// 这里简化实现，实际应该使用json库
	file, err := os.Create(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	writer := bufio.NewWriter(file)
	defer writer.Flush()

	// 写入JSON格式
	_, err = writer.WriteString("{\n")
	if err != nil {
		return err
	}

	count := 0
	for key, value := range properties {
		if count > 0 {
			_, err = writer.WriteString(",\n")
			if err != nil {
				return err
			}
		}
		_, err = writer.WriteString(fmt.Sprintf("  \"%s\": \"%s\"", key, value))
		if err != nil {
			return err
		}
		count++
	}

	_, err = writer.WriteString("\n}\n")
	return err
}

// loadXMLFile 加载XML文件（简化实现）
func (cfm *ConfigFileManager) loadXMLFile(filePath string) (map[string]string, error) {
	// 这里简化实现，实际应该使用xml库
	return cfm.loadPropertiesFile(filePath)
}

// saveXMLFile 保存XML文件（简化实现）
func (cfm *ConfigFileManager) saveXMLFile(properties map[string]string, filePath string) error {
	// 这里简化实现，实际应该使用xml库
	file, err := os.Create(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	writer := bufio.NewWriter(file)
	defer writer.Flush()

	// 写入XML格式
	_, err = writer.WriteString("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
	if err != nil {
		return err
	}

	_, err = writer.WriteString("<configuration>\n")
	if err != nil {
		return err
	}

	for key, value := range properties {
		_, err = writer.WriteString(fmt.Sprintf("  <property name=\"%s\">%s</property>\n", key, value))
		if err != nil {
			return err
		}
	}

	_, err = writer.WriteString("</configuration>\n")
	return err
}

// mergeEnvironmentVariables 合并环境变量配置
func (cfm *ConfigFileManager) mergeEnvironmentVariables(properties map[string]string) {
	for _, env := range os.Environ() {
		pair := strings.SplitN(env, "=", 2)
		if len(pair) != 2 {
			continue
		}

		key := pair[0]
		value := pair[1]

		// 只处理以指定前缀开头的环境变量
		if strings.HasPrefix(key, cfm.envConfigPrefix) {
			// 转换环境变量名为配置属性名
			propertyKey := strings.ToLower(key[len(cfm.envConfigPrefix):])
			propertyKey = strings.ReplaceAll(propertyKey, "_", ".")
			properties[propertyKey] = value
		}
	}
}

// GetDefaultConfigFile 获取默认配置文件路径
func (cfm *ConfigFileManager) GetDefaultConfigFile() string {
	return cfm.defaultConfigFile
}

// SetDefaultConfigFile 设置默认配置文件路径
func (cfm *ConfigFileManager) SetDefaultConfigFile(configFile string) {
	cfm.mutex.Lock()
	defer cfm.mutex.Unlock()

	cfm.defaultConfigFile = configFile
}

// GetEnvConfigPrefix 获取环境变量配置前缀
func (cfm *ConfigFileManager) GetEnvConfigPrefix() string {
	return cfm.envConfigPrefix
}

// SetEnvConfigPrefix 设置环境变量配置前缀
func (cfm *ConfigFileManager) SetEnvConfigPrefix(prefix string) {
	cfm.mutex.Lock()
	defer cfm.mutex.Unlock()

	cfm.envConfigPrefix = prefix
}
